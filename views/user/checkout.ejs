 
 <%- include('../partials/user/header') %>

 
 <!-- Start Banner Area -->
 <section class="banner-area organic-breadcrumb">
    <div class="container">
        <div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
            <div class="col-first">
                <h1>Checkout</h1>
                <nav class="d-flex align-items-center">
                    <a href="/">Home<span class="lnr lnr-arrow-right"></span></a>
                    <a href="/cart">Cart<span class="lnr lnr-arrow-right"></span></a>
                    <a href="/checkout">Checkout</a>
                </nav>
            </div>
        </div>
    </div>
</section>
<!-- End Banner Area -->

<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .order-summary {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .order-summary img {
            width: 50px;
            height: 50px;
        }
        .order-summary .product-name {
            font-size: 14px;
        }
        .order-summary .product-mn {
            font-size: 12px;
            color: gray;
        }
        .order-summary .product-price {
            color: blue;
            font-weight: bold;
        }
        .order-summary .total-price {
            color: blue;
            font-weight: bold;
        }
        .order-summary .apply-btn {
            background-color: #ffc107;
            color: white;
        }
        .order-summary .place-order-btn {
            background-color: #ffc107;
            color: white;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container py-5">
        <div class="row">
            <!-- Billing Address -->
            <div class="col-lg-8 mb-4">
                <div class="bg-white p-4 rounded shadow-sm">
                    <h2 class="h4 mb-4">Shipping Address</h2>
                    
                    <!-- Address Selection Area -->
                    <div class="form-group">
                        <label for="existingAddress">Select Existing Address</label>
                        <select id="existingAddress" class="form-control">
                            <option selected>Select an address</option>
                            <% if (userAddress && userAddress.address.length > 0) { %>
                                <% userAddress.address.forEach((address) => { %>
                                    <option value="<%= address._id %>">
                                        <%= address.addressType %> - <%= address.name %>,
                                        <%= address.streetAddress %>, <%= address.city %>, <%= address.state %>, <%= address.country %>,
                                        &#10;
                                        <%= address.phone %>
                                    </option>
                                <% }); %>
                            <% } else { %>
                                <option disabled>No addresses available</option>
                            <% } %>
                        </select>
                    </div>
                    <a href="/addAddressCheckout"><button type="button" class="btn btn-primary mt-5" id="addNewAddressBtn">Add New Address</button></a>
                    
            
                    <!-- Add New Address Button -->
                    <% if (!userAddress || userAddress.address.length === 0) { %>
                        <p  id="addNewAddressBtn">Add New Address</p>
                    <% } %>
            
                    <!-- New Address Form (hidden by default) -->
                    <div id="newAddressForm" style="display: none;">
                        <h3 class="h5 mt-4">New Address</h3>
                        <!-- Include the new address form fields here -->
                        <!-- Similar to the form structure you provided earlier -->
                    </div>
                </div>
            </div>
            
            <script>
                // JavaScript to handle the "Add New Address" button click
                document.getElementById('addNewAddressBtn').addEventListener('click', function() {
                    document.getElementById('newAddressForm').style.display = 'block';
                });
            </script>
            <!-- Order Summary -->
            <div class="col-lg-4">
                <div class="order-summary">
                    <h2 class="h4 mb-4">Your Order</h2>
                    <div class="border-bottom pb-3 mb-3">
                        <div class="d-flex justify-content-between mb-2">
                            <span class="font-weight-bold">Products</span>
                            <span class="font-weight-bold">Subtotal</span>
                        </div>
                        <% if (cartItems && cartItems.length > 0) { %>
                            <% let subtotal = 0; %>
                            <% cartItems.forEach(function(item) { %>
                                <% subtotal += item.totalPrice; %>
                                <div class="d-flex justify-content-between mb-2">
                                    <div class="d-flex align-items-center">
                                        <a style="all: unset; display: contents;" href="/productDetails?id=<%=item.product._id%>">
                                        <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>">
                                        <div class="ml-2">
                                            <p class="product-name mb-0"><%= item.product.productName.split('|')[0].trim() %> (x<%= item.quantity %>)</p>
                                            <p class="product-mn mb-0"><%= item.product.category.name %></p>
                                        </div>
                                    </a>
                                    </div>
                                    <span class="product-price">₹ <%= item.totalPrice.toFixed(2) %></span>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="5" class="text-center">
                                    <p class="lead mb-4">No item found in Cart</p>
                                </td>
                            </tr>
                        <% } %>
                    </div>
                    
                    <div class="border-bottom pb-3 mb-3">
                        <div class="coupon-section mb-4">
                            <h3 class="h5 mb-3">Apply Coupon</h3>
                            <div class="input-group">
                                <input type="text" id="couponCode" class="form-control" placeholder="Enter coupon code">
                                <button class="btn btn-primary" onclick="applyCoupon()">Apply</button>
                            </div>
                            <p id="couponMessage" class="mt-2" style="display: none;"></p>
                        </div>
                    
                        <div id="appliedCoupon" style="display: none;">
                            <p>Applied Coupon: <span id="appliedCouponName"></span></p>
                            <button class="btn btn-sm btn-danger" onclick="removeCoupon()">Remove</button>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal</span>
                            <span>₹ <span id="subtotal"><%= subtotal.toFixed(2) %></span></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Coupon Discount</span>
                            <span>(-) ₹ <span id="couponDiscount">0.00</span></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Shipping</span>
                            <span>₹ 50.00</span>
                        </div>
                        <div class="text-right text-primary mb-2">
                            <a href="#" onclick="showShippingCharge(); return false;">View shipping charge</a>
                        </div>
                        <div class="d-flex justify-content-between font-weight-bold">
                            <span>Total</span>
                            <span class="total-price">₹ <span id="grandTotal"><%= subtotal + 50 %>.00</span></span>
                        </div>
                    </div>
                    <div class="mb-4">
                        <h3 class="h5 mb-3">Payment Method</h3>
                        
                        <div class="mb-3">
                            <label class="d-flex align-items-center">
                                <input type="radio" name="payment" value="razorpay" class="mr-2">
                                <img src="./img/icon/razorpay.webp" alt="Razorpay" style="height: 30px;">
                                <span class="ml-2">Online Payment</span>
                            </label>
                        </div>
                        <div class="mb-3">
                            <label class="d-flex align-items-center">
                                <input type="radio" name="payment" value="wallet" class="mr-2">
                                <span>Wallet Payment (Balance: ₹<%= wallet.balance.toFixed(2) %>)</span>
                            </label>
                        </div>
                        <div class="mb-3">
                            <label class="d-flex align-items-center">
                                <input type="radio" name="payment" value="cod" class="mr-2">
                                <span>Cash on delivery</span>
                            </label>
                        </div>
                    </div>
                    <button class="btn place-order-btn btn-block">Place Order</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Wallet Payment Modal -->
<div class="modal fade" id="walletPaymentModal" tabindex="-1" aria-labelledby="walletPaymentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="walletPaymentModalLabel">Wallet Payment</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <h6>Available Balance: ₹<span id="walletBalance"><%= wallet.balance.toFixed(2) %></span></h6>
                    <h6>Payable Amount: ₹<span id="payableAmount"></span></h6>
                </div>
                <div id="insufficientFunds" style="display: none;">
                    <div class="alert alert-warning">
                        Insufficient funds in wallet. Please add money to continue.
                    </div>
                    <button class="btn btn-primary" onclick="showAddMoneyModal()">Add Money</button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="confirmWalletPayment">Pay Now</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Money Modal -->
<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addMoneyModalLabel">Add Money to Wallet</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mb-4">
                    <input type="number" id="amount" class="form-control form-control-lg text-center" placeholder="Enter Amount (₹)" min="1" step="1">
                </div>
                <div class="text-center mb-4">
                    <div class="quick-amount" onclick="setAmount(100)">₹100</div>
                    <div class="quick-amount" onclick="setAmount(500)">₹500</div>
                    <div class="quick-amount" onclick="setAmount(1000)">₹1000</div>
                    <div class="quick-amount" onclick="setAmount(2000)">₹2000</div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="payButton">Add Money</button>
            </div>
        </div>
    </div>
</div>



    


    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

</body>

<script>


let appliedCoupon = null;

function applyCoupon() {
    const couponCode = document.getElementById('couponCode').value;
    const subtotal = parseFloat(document.getElementById('subtotal').textContent);

    fetch('/apply-coupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ couponCode, subtotal }),
    })
    .then(response => response.json())
    .then(data => {
        const messageElement = document.getElementById('couponMessage');
        if (data.success) {
            appliedCoupon = data.coupon;
            updateOrderSummary();
            messageElement.textContent = 'Coupon applied successfully!';
            messageElement.style.color = 'green';
            document.getElementById('appliedCoupon').style.display = 'block';
            document.getElementById('appliedCouponName').textContent = data.coupon.name;
            document.querySelector('.coupon-section').style.display = 'none';
        } else {
            messageElement.textContent = data.message;
            messageElement.style.color = 'red';
        }
        messageElement.style.display = 'block';
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while applying the coupon', 'error');
    });
}

function removeCoupon() {
    appliedCoupon = null;
    updateOrderSummary();
    document.getElementById('appliedCoupon').style.display = 'none';
    document.querySelector('.coupon-section').style.display = 'block';
    document.getElementById('couponMessage').style.display = 'none';
    document.getElementById('couponCode').value = '';
}

function updateOrderSummary() {
    const subtotalElement = document.getElementById('subtotal');
    const couponDiscountElement = document.getElementById('couponDiscount');
    const grandTotalElement = document.getElementById('grandTotal');

    const subtotal = parseFloat(subtotalElement.textContent);
    let discount = 0;

    if (appliedCoupon) {
        discount = appliedCoupon.offerPrice;
    }

    const grandTotal = subtotal - discount + 50;

    couponDiscountElement.textContent = discount.toFixed(2);
    grandTotalElement.textContent = grandTotal.toFixed(2);
}





function placeOrder() {
    const selectedAddress = document.getElementById('existingAddress');
    const paymentMethod = document.querySelector('input[name="payment"]:checked');
    
    if (!selectedAddress || selectedAddress.value === 'Select an address') {
        Swal.fire('Error', 'Please select a shipping address', 'error');
        return;
    }

    if (!paymentMethod) {
        Swal.fire('Error', 'Please select a payment method', 'error');
        return;
    }

    const orderData = {
        addressId: selectedAddress.value,
        paymentMethod: paymentMethod.value,
        couponCode: appliedCoupon ? appliedCoupon.name : null
    };

    if (paymentMethod.value === 'cod') {
        processCODOrder(orderData);
    } else if (paymentMethod.value === 'razorpay') {
        processRazorpayOrder(orderData);
    } else if (paymentMethod.value === 'wallet') {
        processWalletOrder(orderData);
    }
}


function processCODOrder(orderData) {
    fetch('/placeOrder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                title: 'Order Placed Successfully!',
                text: `Order IDs: ${data.orderIds.join(", ")}`,
                icon: 'success',
                confirmButtonText: 'View Orders'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/orders';
                }
            });
        } else {
            Swal.fire('Error', data.message || 'An error occurred while placing the order', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while placing the order', 'error');
    });
}

function processRazorpayOrder(orderData) {
    // First create order on server
    fetch('/create-razorpay-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const options = {
                key: data.razorpayKeyId, // Your Razorpay Key ID
                amount: data.amount,
                currency: data.currency,
                name: 'Your Store Name',
                description: 'Purchase Description',
                order_id: data.orderId,
                handler: function (response) {
                    // Handle successful payment
                    verifyPayment(response, orderData);
                },
                prefill: {
                    name: data.customerName,
                    email: data.customerEmail,
                    contact: data.customerPhone
                },
                theme: {
                    color: '#F37254'
                }
            };
            const rzp = new Razorpay(options);
            rzp.open();
        } else {
            Swal.fire('Error', data.message || 'An error occurred while creating the order', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while processing the payment', 'error');
    });
}

function verifyPayment(paymentResponse, orderData) {
    fetch('/verify-payment', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            paymentResponse,
            orderData
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                title: 'Payment Successful!',
                text: `Order IDs: ${data.orderIds.join(", ")}`,
                icon: 'success',
                confirmButtonText: 'View Orders'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/orders';
                }
            });
        } else {
            Swal.fire('Error', data.message || 'Payment verification failed', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while verifying the payment', 'error');
    });
}

    function showShippingCharge() {
        Swal.fire({
            title: 'Shipping Charge',
            text: 'Shipping charge is ₹ 50.00 For All Orders',
            icon: 'info',
            confirmButtonText: 'OK'
        });
    }




    function checkWalletBalance() {
    const walletBalance = parseFloat(document.getElementById('walletBalance').textContent);
    const payableAmount = parseFloat(document.getElementById('grandTotal').textContent);
    
    document.getElementById('payableAmount').textContent = payableAmount.toFixed(2);
    
    const walletPaymentModal = new bootstrap.Modal(document.getElementById('walletPaymentModal'));
    const insufficientFunds = document.getElementById('insufficientFunds');
    const confirmWalletPayment = document.getElementById('confirmWalletPayment');
    
    if (walletBalance < payableAmount) {
        insufficientFunds.style.display = 'block';
        confirmWalletPayment.style.display = 'none';
    } else {
        insufficientFunds.style.display = 'none';
        confirmWalletPayment.style.display = 'block';
    }
    
    walletPaymentModal.show();
}



function processWalletOrder(orderData) {
    const walletBalance = parseFloat(document.getElementById('walletBalance').textContent);
    const payableAmount = parseFloat(document.getElementById('grandTotal').textContent);
    
    document.getElementById('payableAmount').textContent = payableAmount.toFixed(2);
    
    const walletPaymentModal = new bootstrap.Modal(document.getElementById('walletPaymentModal'));
    const insufficientFunds = document.getElementById('insufficientFunds');
    const confirmWalletPayment = document.getElementById('confirmWalletPayment');
    
    if (walletBalance < payableAmount) {
        insufficientFunds.style.display = 'block';
        confirmWalletPayment.style.display = 'none';
    } else {
        insufficientFunds.style.display = 'none';
        confirmWalletPayment.style.display = 'block';
    }
    
    walletPaymentModal.show();
}

function placeWalletOrder(orderData) {
    fetch('/place-wallet-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                title: 'Order Placed Successfully!',
                text: `Order IDs: ${data.orderIds.join(", ")}`,
                icon: 'success',
                confirmButtonText: 'View Orders'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/orders';
                }
            });
        } else {
            Swal.fire('Error', data.message || 'Failed to place order', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while placing the order', 'error');
    });
}



function showAddMoneyModal() {
    const walletPaymentModal = bootstrap.Modal.getInstance(document.getElementById('walletPaymentModal'));
    walletPaymentModal.hide();
    
    const addMoneyModal = new bootstrap.Modal(document.getElementById('addMoneyModal'));
    addMoneyModal.show();

    // Add event listener for modal close button
    document.querySelector('#addMoneyModal .btn-close').addEventListener('click', () => {
        addMoneyModal.hide();
    });
}

document.getElementById('confirmWalletPayment').addEventListener('click', async () => {
    const selectedAddress = document.getElementById('existingAddress');
    if (!selectedAddress || selectedAddress.value === 'Select an address') {
        alert('Please select a shipping address');
        return;
    }

    const orderData = {
        addressId: selectedAddress.value,
        paymentMethod: 'wallet',
        couponCode: appliedCoupon ? appliedCoupon.name : null
    };

    try {
        const response = await fetch('/place-wallet-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });

        const data = await response.json();
        if (data.success) {
            Swal.fire({
                title: 'Order Placed Successfully!',
                text: `Order IDs: ${data.orderIds.join(", ")}`,
                icon: 'success',
                confirmButtonText: 'View Orders'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/orders';
                }
            });
        } else {
            Swal.fire('Error', data.message || 'Failed to place order', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while placing the order', 'error');
    }
});

// Add Money to Wallet
document.getElementById('payButton').addEventListener('click', async () => {
    const amount = document.getElementById('amount').value;
    
    if (!amount || amount < 1) {
        Swal.fire('Error', 'Please enter a valid amount', 'error');
        return;
    }

    try {
        const response = await fetch('/wallet/create-razorpay-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ amount })
        });

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message);
        }

        const options = {
            key: data.key_id,
            amount: data.amount,
            currency: "INR",
            name: "Wallet Recharge",
            description: "Add money to wallet",
            order_id: data.order_id,
            handler: async function (response) {
                try {
                    const verifyResponse = await fetch('/wallet/verify-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(response)
                    });

                    const verifyData = await verifyResponse.json();
                    
                    if (verifyData.success) {
                        $('#addMoneyModal').modal('hide');
                        const updatedBalance = parseFloat(document.getElementById('walletBalance').textContent) + parseFloat(amount);
                        document.getElementById('walletBalance').textContent = updatedBalance.toFixed(2);
                        document.getElementById('modalWalletBalance').textContent = updatedBalance.toFixed(2);
                        
                        // Check if we can now proceed with the payment
                        const payableAmount = parseFloat(document.getElementById('payableAmount').textContent);
                        if (updatedBalance >= payableAmount) {
                            document.getElementById('insufficientFunds').style.display = 'none';
                            document.getElementById('confirmWalletPayment').style.display = 'block';
                        }
                        
                        Swal.fire({
                            title: 'Success!',
                            text: 'Money added to wallet successfully',
                            icon: 'success',
                            confirmButtonText: 'Continue Payment'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $('#walletPaymentModal').modal('show');
                            }
                        });
                    } else {
                        Swal.fire('Error', 'Payment verification failed', 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire('Error', 'Payment verification failed', 'error');
                }
            },
            theme: {
                color: "#4a5568"
            }
        };

        const rzp = new Razorpay(options);
        rzp.open();
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'Failed to process payment', 'error');
    }
});

function setAmount(amount) {
    document.getElementById('amount').value = amount;
}



    // Update the place order button onclick handler
    document.querySelector('.place-order-btn').onclick = placeOrder;
</script>

<%- include('../partials/user/footer') %>