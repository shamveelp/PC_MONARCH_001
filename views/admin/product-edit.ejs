<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        :root {
      --primary-color: #3498db;
      --secondary-color: #2c3e50;
      --success-color: #2ecc71;
      --danger-color: #e74c3c;
      --info-color: #3498db;
      --light-gray: #ecf0f1;
    }

        .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        .thumbnail {
            position: relative;
            width: 150px;
        }
        .thumbnail img {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }
        .delete-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            font-size: 12px;
            cursor: pointer;
        }
        .cropper-container {
            width: 100%;
            max-width: 500px;
            margin: 20px auto;
        }
    </style>
</head>
<section class="content-main">
    <div class="content-header">
        <h2 class="content-title">Edit Product</h2>
    </div>
    <div class="card mb-4">
        <div class="card-body">
            <form id="editProductForm" method="POST" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data">
                <div class="mb-4">
                    <label for="product_name" class="form-label">Product Name</label>
                    <input type="text" name="productName" value="<%= product.productName %>" class="form-control" id="product_name" required>
                </div>
                
                <div class="mb-4">
                    <label class="form-label">Description</label>
                    <textarea name="description" class="form-control" rows="4" required><%= product.description %></textarea>
                </div>

                <div class="mb-4">
                    <label class="form-label">Full Description</label>
                    <textarea name="fullDescription" class="form-control" rows="6" required><%= product.fullDescription %></textarea>
                </div>

                <div class="row">
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Regular Price</label>
                            <input name="regularPrice" type="number" value="<%= product.regularPrice %>" class="form-control" required>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Sale Price</label>
                            <input name="salePrice" type="number" value="<%= product.salePrice %>" class="form-control" required>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Quantity</label>
                            <input name="quantity" type="number" value="<%= product.quantity %>" class="form-control" required>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Color</label>
                            <input name="color" type="text" value="<%= product.color %>" class="form-control" required>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-4">
                        <div class="mb-4">
                            <label class="form-label">Brand</label>
                            <input name="brand" type="text" value="<%= product.brand %>" class="form-control" required>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="mb-4">
                            <label class="form-label">Processor</label>
                            <input name="processor" type="text" value="<%= product.processor %>" class="form-control" required>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="mb-4">
                            <label class="form-label">Graphics Card</label>
                            <input name="graphicsCard" type="text" value="<%= product.graphicsCard %>" class="form-control" required>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-4">
                        <div class="mb-4">
                            <label class="form-label">Storage</label>
                            <input name="storages" type="text" value="<%= product.storages %>" class="form-control" required>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="mb-4">
                            <label class="form-label">Display</label>
                            <input name="display" type="text" value="<%= product.display %>" class="form-control" required>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="mb-4">
                            <label class="form-label">Operating System</label>
                            <input name="operatingSystem" type="text" value="<%= product.operatingSystem %>" class="form-control" required>
                        </div>
                    </div>
                </div>

                <div class="mb-4">
                    <label class="form-label">Box Contains</label>
                    <input name="boxContains" type="text" value="<%= product.boxContains %>" class="form-control" required>
                </div>

                <div class="mb-4">
                    <label class="form-label">Category</label>
                    <select class="form-select" name="category" required>
                        <% for(let i = 0; i < cat.length; i++) { %>
                            <option value="<%= cat[i]._id %>" <%= product.category.equals(cat[i]._id) ? 'selected' : '' %>>
                                <%= cat[i].name %>
                            </option>
                        <% } %>
                    </select>
                </div>

                <div class="mb-4">
                    <label class="form-label">Product Images</label>
                    <div class="row">
                        <% for(let i = 0; i < 4; i++) { %>
                            <div class="col-md-3 mb-3">
                                <div class="card">
                                    <% if(product.productImage[i]) { %>
                                        <img src="/<%= product.productImage[i] %>" class="card-img-top" alt="Product Image">
                                        <div class="card-body">
                                            <button type="button" class="btn btn-danger btn-sm" onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>', <%= i %>)">Delete</button>
                                        </div>
                                    <% } else { %>
                                        <div class="card-body">
                                            <input type="file" name="image<%= i+1 %>" accept="image/*" class="form-control" onchange="previewImage(event, <%= i %>)">
                                            <img id="preview<%= i %>" src="#" alt="Image preview" style="display: none; max-width: 100%; height: auto; margin-top: 10px;">
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>

                

                <div id="cropperContainer" class="cropper-container" style="display: none;">
                    <img id="cropperImage" src="/placeholder.svg" alt="Image to crop">
                </div>

                <div class="mb-4">
                    <button class="btn btn-primary" type="submit">Update Product</button>
                </div>
            </form>
        </div>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script>
    let croppers = {};

function previewImage(event, index) {
    const input = event.target;
    if (input.files && input.files[0]) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const preview = document.getElementById(`preview${index}`);
            preview.src = e.target.result;
            preview.style.display = 'block';

            if (croppers[index]) {
                croppers[index].destroy();
            }

            croppers[index] = new Cropper(preview, {
                aspectRatio: 1,
                viewMode: 1,
                ready: function() {
                    this.cropper.crop();
                }
            });
        };
        reader.readAsDataURL(input.files[0]);
    }
}

document.getElementById('editProductForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Form validation
    let isValid = true;

    // Get price and quantity values
    const quantity = parseInt(document.querySelector('input[name="quantity"]').value);
    const regularPrice = parseFloat(document.querySelector('input[name="regularPrice"]').value);
    const salePrice = parseFloat(document.querySelector('input[name="salePrice"]').value);

    // Validate quantity
    if (quantity < 0) {
        isValid = false;
        Swal.fire({
            title: 'Invalid Quantity!',
            text: 'Quantity cannot be less than zero',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return;
    }

    // Validate regular price
    if (regularPrice <= 0) {
        isValid = false;
        Swal.fire({
            title: 'Invalid Regular Price!',
            text: 'Regular price must be greater than zero',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return;
    }

    // Validate sale price
    if (salePrice <= 0) {
        isValid = false;
        Swal.fire({
            title: 'Invalid Sale Price!',
            text: 'Sale price must be greater than zero',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return;
    }

    // Validate sale price is not higher than regular price
    if (salePrice > regularPrice) {
        isValid = false;
        Swal.fire({
            title: 'Invalid Price!',
            text: 'Sale price cannot be higher than regular price',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return;
    }

    if (isValid) {
        const formData = new FormData(this);

        // Process cropped images
        for (let i = 0; i < 4; i++) {
            if (croppers[i]) {
                croppers[i].getCroppedCanvas().toBlob((blob) => {
                    formData.set(`image${i+1}`, blob, `cropped-image-${i+1}.jpg`);
                }, 'image/jpeg');
            }
        }

        fetch(this.action, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Product updated successfully',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/admin/products';
                    }
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: data.message || 'An error occurred while updating the product',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'An unexpected error occurred',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    }
});

// Add real-time validation for quantity, regular price, and sale price
document.querySelector('input[name="quantity"]').addEventListener('input', function() {
    const quantity = parseInt(this.value);
    if (quantity < 0) {
        this.setCustomValidity('Quantity cannot be less than zero');
        this.reportValidity();
    } else {
        this.setCustomValidity('');
    }
});

document.querySelector('input[name="regularPrice"]').addEventListener('input', function() {
    const regularPrice = parseFloat(this.value);
    const salePrice = parseFloat(document.querySelector('input[name="salePrice"]').value);
    
    if (regularPrice <= 0) {
        this.setCustomValidity('Regular price must be greater than zero');
        this.reportValidity();
    } else {
        this.setCustomValidity('');
        
        // Check sale price relationship
        if (salePrice && salePrice > regularPrice) {
            document.querySelector('input[name="salePrice"]').setCustomValidity('Sale price cannot be higher than regular price');
            document.querySelector('input[name="salePrice"]').reportValidity();
        } else {
            document.querySelector('input[name="salePrice"]').setCustomValidity('');
        }
    }
});

document.querySelector('input[name="salePrice"]').addEventListener('input', function() {
    const salePrice = parseFloat(this.value);
    const regularPrice = parseFloat(document.querySelector('input[name="regularPrice"]').value);
    
    if (salePrice <= 0) {
        this.setCustomValidity('Sale price must be greater than zero');
        this.reportValidity();
    } else if (regularPrice && salePrice > regularPrice) {
        this.setCustomValidity('Sale price cannot be higher than regular price');
        this.reportValidity();
    } else {
        this.setCustomValidity('');
    }
});

function deleteSingleImage(imageName, productId, index) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/admin/deleteImage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    imageNameToServer: imageName,
                    productIdToServer: productId,
                    imageIndex: index
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.status) {
                    Swal.fire(
                        'Deleted!',
                        'Your image has been deleted.',
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire(
                        'Error!',
                        'Failed to delete image',
                        'error'
                    );
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire(
                    'Error!',
                    'An error occurred while deleting the image',
                    'error'
                );
            });
        }
    });
}
    
</script>

<%- include("../../views/partials/admin/footer") %>