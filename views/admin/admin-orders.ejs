<%- include('../partials/admin/header') %>

<style>
  :root {
      --primary-color: #3498db;
      --secondary-color: #2c3e50;
      --success-color: #2ecc71;
      --danger-color: #e74c3c;
      --info-color: #3498db;
      --light-gray: #ecf0f1;
    }
    .order-table th, .order-table td {
        vertical-align: middle;
    }
    .status-badge {
        padding: 6px 12px;
        border-radius: 15px;
        font-weight: 500;
    }
    .order-actions .btn {
        margin: 0 2px;
    }
</style>

<div class="container-fluid px-4">
    <h1 class="mt-4">Order Management</h1>
    

    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            All Orders
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped order-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Product</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(order => { %>
                            <tr>
                                <td>#<%= order.orderId %></td>
                                <td><%= new Date(order.createdOn).toLocaleDateString() %></td>
                                <td>
                                    <div>
                                        <strong><%= order.address.name %></strong>
                                        <!-- <div class="text-muted small"><%= order.address.email %></div> -->
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="d-flex align-items-center">
                                            <img src="/<%= order.orderedItems[0].product.productImage[0] %>" 
                                                 alt="Product" 
                                                 style="width: 50px; height: 50px; object-fit: cover;"
                                                 class="me-2">
                                            
                                        </div>
                                        <div>
                                            <div><%= order.orderedItems[0].product.productName %></div>
                                            <small class="text-muted">Qty: <%= order.orderedItems[0].quantity %></small>
                                        </div>
                                    </div>
                                </td>
                                <td>â‚¹<%= Math.round(order.finalAmount) %></td>
                                <td>
                                    <div>
                                        <span class="status-badge <%= 
                                            order.status === 'delivered' ? 'bg-success' :
                                            order.status === 'cancelled' ? 'bg-danger' :
                                            order.status === 'shipped' ? 'bg-info' :
                                            order.status === 'return_requested' ? 'bg-warning' :
                                            order.status === 'returning' ? 'bg-info' :
                                            order.status === 'returned' ? 'bg-secondary' :
                                            'bg-warning'
                                        %>">
                                            <%= order.status.toUpperCase() %>
                                        </span>
                                        <!-- <% if (order.status === 'return_requested') { %>
                                            <span class="return-badge bg-warning">Pending Review</span>
                                        <% } else if (order.status === 'returning' && order.requestStatus === 'approved') { %>
                                            <span class="return-badge bg-info">In Progress</span>
                                        <% } %> -->
                                    </div>
                                    <!-- <% if (order.paymentMethod) { %>
                                        <small class="text-muted d-block mt-1">
                                            Payment: <%= order.paymentMethod.toUpperCase() %>
                                        </small>
                                    <% } %> -->
                                </td>
                                <td class="order-actions">
                                    <a href="/admin/orders/<%= order._id %>" 
                                       class="btn btn-primary btn-sm">
                                        View Details
                                    </a>
                                    
                                    <% if (order.status === 'return_requested' && order.requestStatus === 'pending') { %>
                                        <div class="btn-group mt-2">
                                            <button onclick="handleReturn('approve', '<%= order._id %>')" 
                                                    class="btn btn-success btn-sm">
                                                Approve Return
                                            </button>
                                            <button onclick="handleReturn('reject', '<%= order._id %>')" 
                                                    class="btn btn-danger btn-sm">
                                                Reject
                                            </button>
                                        </div>
                                    <% } else if (order.status === 'returning' && order.requestStatus === 'approved') { %>
                                        <button onclick="updateReturnStatus('<%= order._id %>')" 
                                                class="btn btn-info btn-sm mt-2">
                                            Update Return Status
                                        </button>
                                    <% } else if (!['cancelled', 'delivered', 'returned', 'return_requested', 'returning'].includes(order.status)) { %>
                                        <div class="mt-2">
                                            <button onclick="updateStatus('<%= order._id %>')" 
                                                    class="btn btn-info btn-sm">
                                                Update Status
                                            </button>
                                            <button onclick="cancelOrder('<%= order._id %>')" 
                                                    class="btn btn-danger btn-sm">
                                                Cancel
                                            </button>
                                        </div>
                                    <% } %>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<!-- Reject Return Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Rejection Reason</label>
                    <textarea class="form-control" id="rejectionReason" rows="3" required></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="submitRejection()">Submit</button>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let currentOrderId = null;

async function updateStatus(orderId) {
    const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: {
            'pending': 'Pending',
            'confirmed': 'Confirmed',
            'shipped': 'Shipped',
            'delivered': 'Delivered'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        try {
            const response = await fetch('/admin/orders/update-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, status }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update status'
            });
        }
    }
}

async function cancelOrder(orderId) {
    const result = await Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch('/admin/orders/cancel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order cancelled successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to cancel order'
            });
        }
    }
}

async function handleReturn(action, orderId) {
    currentOrderId = orderId;
    
    if (action === 'reject') {
        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
        return;
    }

    if (action === 'approve') {
        Swal.fire({
            title: 'Are you sure?',
            text: "You are about to approve this return request!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, approve it!'
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch('/admin/orders/handle-return', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId: orderId,
                            action: action
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        Swal.fire(
                            'Approved!',
                            'Return request has been approved.',
                            'success'
                        ).then(() => {
                            location.reload();
                        });
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire(
                        'Error!',
                        error.message || 'Failed to approve return request',
                        'error'
                    );
                }
            }
        });
    }
}

async function submitRejection() {
    const reason = document.getElementById('rejectionReason').value;
    
    if (!reason) {
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Please provide a rejection reason'
        });
        return;
    }

    try {
        const response = await fetch('/admin/orders/handle-return', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: currentOrderId,
                action: 'reject',
                message: reason
            })
        });

        const data = await response.json();
        
        if (data.success) {
            await Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Return request rejected successfully',
                timer: 1500
            });
            location.reload();
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to reject return request'
        });
    }
}

async function updateReturnStatus(orderId) {
    const { value: status } = await Swal.fire({
        title: 'Update Return Status',
        input: 'select',
        inputOptions: {
            'returning': 'Returning',
            'returned': 'Returned'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        try {
            const response = await fetch('/admin/orders/update-return-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, status }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Return status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update status'
            });
        }
    }
}
</script>

<%- include('../partials/admin/footer') %>